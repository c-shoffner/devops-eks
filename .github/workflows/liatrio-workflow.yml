name: "Liatrio Exercise"
on: 
  workflow_dispatch:

jobs:
  # terraform:
  #   name: "Terraform"
  #   runs-on: ubuntu-latest
  #   env:
  #     working-directory: ./terraform
  #   permissions:
  #     pull-requests: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3

  #     - name: Setup Terraform
  #       uses: hashicorp/setup-terraform@v1
  #       with:
  #         cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

  #     - name: Terraform Init
  #       id: init
  #       run: terraform init
  #       working-directory: ${{ env.working-directory }}

  #     - name: Terraform Validate
  #       id: validate
  #       run: terraform validate -no-color
  #       working-directory: ${{ env.working-directory }}

  #     - name: Terraform Plan
  #       id: plan
  #       run: terraform plan -no-color -input=false
  #       continue-on-error: true
  #       working-directory: ${{ env.working-directory }}

  #     - name: Terraform Apply
  #       id: apply
  #       run: terraform apply -auto-approve -input=false
  #       working-directory: ${{ env.working-directory }}

  # python_build:
  #   runs-on: ubuntu-latest
  #   # needs: terraform
  #   steps:
  #     - name: Checkout branch
  #       uses: actions/checkout@v3
      
  #     - name: Login to Docker Hub
  #       uses: docker/login-action@v2
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_TOKEN }}

  #     - name: Setup Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Build and Push
  #       uses: docker/build-push-action@v4
  #       with:
  #         context: app
  #         file: app/Dockerfile
  #         push: true
  #         tags: ${{ secrets.DOCKERHUB_USERNAME }}/liatrio_exercise:latest

  kube_deploy:
    runs-on: ubuntu-latest
    # needs: python_build
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.8'

      - name: install python packages
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: get terraform outputs
        env:
          TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
        run: python get_outputs.py

      - name: deploy to kube cluster
        env: 
          CLUSTER_NAME: ${{ env.CLUSTER_NAME }}
          CLUSTER_REGION: ${{ env.CLUSTER_REGION }}

        run: |
          aws eks update-kubeconfig --name $CLUSTER_NAME --region $CLUSTER_REGION
          kubectl apply -f manifest.yaml

      - name: set cloudflare dns
        env: 
          CLOUDFLARE_API: ${{ env.CLOUDFLARE_API }}
          ZONE_ID: ${{ env.ZONE_ID }}
          DNS_RECORD: ${{ env.DNS_RECORD }}
        run: python set_cloudflare.py

  health_check:
    runs-on: ubuntu-latest
    needs: kube_deploy
    steps: 
      - name: checkout repo
        uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v4
        with: 
          python-version: '3.8'

      - name: health check
        env:
          HOSTNAME: ${{ env.HOSTNAME }}
        run: python api_test.py

      - name: install python packages
        run: |
          python -m pip install --upgrade pip
          pip install requests